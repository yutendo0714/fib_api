name: Laravel CI/CD Workflow

on:
  push:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: gd

      - name: Install Composer Dependencies
        run: composer install --no-progress --no-suggest --prefer-dist
        working-directory: ./

      - name: Copy env.testing file
        if: always()
        run: cp ./.env.example ./.env
        working-directory: ./

      - name: Clear Application Cache
        if: always()
        run: php artisan cache:clear
        working-directory: ./

      - name: Check with PHPStan
        if: always()
        run: vendor/bin/phpstan analyse --error-format=github --configuration=phpstan.neon
        working-directory: ./

      - name: Run Unit Tests
        if: always()
        run: vendor/bin/phpunit --coverage-html tests/Report
        working-directory: ./

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: ./tests/Report/*
          retention-days: 7
          
  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: (github.ref == 'refs/heads/main') && (github.event_name == 'push')

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Delete storage
  #       run: rm -rf ./src/storage

  #     - name: Zipping code
  #       run: zip -r todo_${{ github.run_id }}.zip .

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET }}
  #         aws-region: ap-northeast-1

  #     - name: Upload source to S3
  #       run: aws s3 cp todo_${{ github.run_id }}.zip s3://todo-revision-bucket --quiet

  #     - name: Registration app to CodeDeploy
  #       run: aws deploy register-application-revision --application-name todo --s3-location bucket=todo-revision-bucket,bundleType="zip",key=todo_${{ github.run_id }}.zip

  #     - name: Deploy app to EC2
  #       run: aws deploy create-deployment --application-name todo --deployment-group-name todoDeployGroup --file-exists-behavior "OVERWRITE" --s3-location bucket=todo-revision-bucket,bundleType="zip",key=todo_${{ github.run_id }}.zip